[device "pump"]
vendor = openaps.vendors.medtronic
extra = pump.ini

[report "last_four_pump_hours.json"]
device = pump
hours = 4.0
use = iter_pump_hours
reporter = JSON

[device "cgm"]
vendor = openaps.vendors.dexcom
extra = cgm.ini

[report "last_four_share_hours.json"]
device = share
hours = 4.0
use = iter_glucose_hours
reporter = JSON

[report "last_four_curl_hours.json"]
device = curl
hours = 4.0
use = iter_glucose_hours
reporter = JSON

[device "oref0"]
vendor = openaps.vendors.process
extra = oref0.ini

[report "status.json"]
device = pump
use = status
reporter = JSON

[report "settings.json"]
device = pump
use = settings
reporter = JSON

[report "enact/enacted.json"]
device = pump
input = enact/suggested.json
use = set_temp_basal
`reporter = JSON

[report "control/enacted.json"]
device = pump
input = predict/oref0.json
use = set_temp_basal
reporter = JSON

[device "ns-upload"]
vendor = openaps.vendors.process
extra = ns-upload.ini

[device "ns-status"]
fields = clock iob suggested enacted battery reservoir status
cmd = ns-status
vendor = openaps.vendor.process
args = 

[device "ns-glucose"]
fields = 
cmd = bash -c
vendor = openaps.vendors.process
args = (curl -s https://francesca.azurewebsites.net/api/v1/entries.json"?type=sgv" | json   -e "this.glucose = this.sgv"  )

[device "curl"]
fields = 
cmd = bash
vendor = openaps.vendors.process
args = -c "curl -s https://francesca.azurewebsites.net/api/v1/entries.json | json -e 'this.glucose = this.sgv'"

[report "monitor/glucose.json"]
device = cgm
use = iter_glucose
reporter = JSON
count = 5

[report "monitor/glucose-ns.json"]
device = ns-bgnow
use = shell
reporter = JSON

[alias]
last_four_hours = report invoke last_four_pump_hours.json last_four_share_hours.json
get = report invoke monitor/clock.json monitor/pump-history.json monitor/pump-history-zoned.json monitor/active-basal-profile.json monitor/reservoir.json monitor/settings.json monitor/status.json monitor/battery.json monitor/bg-targets.json monitor/insulin-sensitivities.json monitor/carb-ratios.json monitor/temp-basal-status.json reporting/latest-treatments.json
curl = https://francesca.azurewebsites.net/api/v1/entries.json?type=sgv
invoke = report invoke
ns-glucose = ! (curl -s https://francesca.azurewebsites.net/api/v1/entries.json"?type=sgv" | json   -e "this.glucose = this.sgv"  )
preflight = ! bash -c "rm  -f model.json &&  openaps report invoke model.json && test -n $(json -f model.json) && echo \"PREFLIGHT OK\" || ( mm-stick warmup fail 'NO PUMP MODEL RESPONDED' || mm-stick fail 'NO MEDTRONIC CARELINK STICK AVAILABLE')"
gather-profile = report invoke settings/settings.json settings/bg_targets.json settings/insulin_sensitivities.json settings/basal_profile.json settings/profile.json
gather-data = ! bash -c "openaps get-share-glucose && openaps get"
gather-ns-data = ! bash -c "openaps get-ns-glucose && openaps get"
gather-share-data = ! bash -c "openaps get-share-glucose && openaps get"
enact = report invoke oref0-predict/enacted.json
latest-ns-treatment-time = ! bash -c "openaps use latest-treatments shell |json created_at"
monitor-pump = report invoke monitor/clock.json monitor/temp_basal.json monitor/pumphistory.json monitor/iob.json
monitor-cgm = report invoke monitor/glucose.json
upload-recent-treatments = ! bash -c "openaps format-latest-nightscout-treatments && test $(json -f upload/latest-treatments.json -a created_at eventType | wc -l ) -gt 0 && (ns-upload $NIGHTSCOUT_HOST $API_SECRET treatments.json upload/latest-treatments.json ) || echo \"No recent treatments to upload\""
oref0-predict = report invoke oref0-predict/profile.json oref0-predict/iob.json oref0-predict/oref0.json
status-upload = ! bash -c "openaps report invoke monitor/upload-status.json && ns-upload $NIGHTSCOUT_HOST $API_SECRET devicestatus.json monitor/upload-status.json"
format-latest-nightscout-treatments = ! bash -c "nightscout cull-latest-openaps-treatments monitor/pumphistory-zoned.json settings/model.json $(openaps latest-ns-treatment-time) > upload/latest-treatments.json"
loop = ! bash -c "openaps monitor-cgm 2>/dev/null && ( openaps preflight && openaps gather && openaps enact) || echo No CGM data."
retry-loop = ! bash -c "until( ! mm-stick warmup || openaps loop); do sleep 5; done"
ns-meal-carbs = ! bash -c "egrep -q carbs.:0, monitor/meal.json && curl -m 30 -s \"$NIGHTSCOUT_HOST/api/v1/treatments.json?find[created_at][\$gte]=date -d \"3 hours ago\" -Iminutes&find[carbs][\$exists]=true\" > monitor/carbhistory.json && oref0-meal monitor/pumphistory-zoned.json settings/profile.json monitor/clock-zoned.json monitor/carbhistory.json > monitor/meal.json; exit 0"

[report "monitor/pump-history.json"]
device = pump
hours = 8
use = iter_pump_hours
reporter = JSON

[report "monitor/clock.json"]
device = pump
use = read_clock
reporter = JSON

[report "monitor/iob.json"]
profile = settings/profile.json
use = shell
reporter = JSON
clock = monitor/clock.json
json_default = True
pumphistory = monitor/pumphistory.json
device = calculate-iob
remainder = []

[report "monitor/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "monitor/active-basal-profile.json"]
device = pump
use = read_selected_basal_profile
reporter = JSON

[report "monitor/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "monitor/settings.json"]
device = pump
use = settings
reporter = JSON

[report "monitor/status.json"]
device = pump
use = read_status
reporter = JSON

[report "monitor/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "monitor/bg-targets.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "monitor/insulin-sensitivities.json"]
device = pump
use = read_insulin_sensitivities
reporter = JSON

[report "monitor/carb-ratios.json"]
device = pump
use = read_carb_ratios
reporter = JSON

[report "model.json"]
device = pump
use = model
reporter = JSON

[device "get-profile"]
vendor = openaps.vendors.process
extra = get-profile.ini

[device "calculate-iob"]
vendor = openaps.vendors.process
extra = calculate-iob.ini

[device "determine-basal"]
vendor = openaps.vendors.process
extra = determine-basal.ini

[report "settings/settings.json"]
device = pump
use = read_settings
reporter = JSON

[report "settings/bg_targets.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "settings/insulin_sensitivities.json"]
device = pump
use = read_insulin_sensitivies
reporter = JSON

[report "settings/basal_profile.json"]
device = pump
use = read_basal_profile_std
reporter = JSON

[report "settings/profile.json"]
use = shell
bg_targets = settings/bg_targets.json
settings = settings/settings.json
basal_profile = settings/basal_profile.json
reporter = text
json_default = True
max_iob = max_iob.json
device = get-profile
remainder = []
insulin_sensitivities = settings/insulin_sensitivities.json

[report "monitor/share-glucose-zoned.json"]
use = rezone
reporter = JSON
astimezone = False
date = timestamp dateString start_at end_at created_at system_time display_time
adjust = missing
input = monitor/share-glucose.json
device = tz
timezone = PST

[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[device "tz"]
vendor = openapscontrib.timezones
extra = tz.ini

[report "monitor/clock-zoned.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
input = monitor/clock.json
device = tz
timezone = CET

[device "calciob"]
vendor = openaps.vendors.process
extra = calciob.ini

[report "iob.json"]
use = shell
reporter = text
json_default = True
device = calciob
input = pump-history.json
remainder = []

[report "enact/suggested.json"]
profile = settings/profile.json
use = shell
temp_basal = monitor/temp_basal.json
reporter = text
json_default = True
device = determine-basal
remainder = []
iob = monitor/iob.json
glucose = monitor/glucose.json

[vendor "openxshareble"]
path = .
module = openxshareble

[device "share"]
vendor = openxshareble
extra = share.ini

[vendor "openapscontrib.mmhistorytools"]
path = .
module = openapscontrib.mmhistorytools

[device "history"]
vendor = openapscontrib.mmhistorytools
extra = history.ini

[vendor "openapscontrib.predict"]
path = .
module = openapscontrib.predict

[device "predict"]
vendor = openapscontrib.predict
extra = predict.ini

[report "insulin_effect_without_future_basal.json"]
use = walsh_insulin_effect
settings = read_settings.json
reporter = JSON
device = predict
history = normalize_history.json
basal_dosing_end = read_clock.json
insulin_sensitivities = read_insulin_sensitivies.json

[report "carb_effect.json"]
use = scheiner_carb_effect
reporter = JSON
absorption_time = 180
carb_ratios = read_carb_ratios.json
device = predict
history = normalize_history.json
insulin_sensitivities = read_insulin_sensitivies.json

[report "predict_glucose_without_future_basal"]
device = predict
use = glucose_from_effects
glucose = clean_glucose.json
effects = ['insulin_effect_without_future_basal.json', 'carb_effect.json']
reporter = JSON

[vendor "openapscontrib.glucosetools"]
path = .
module = openapscontrib.glucosetools

[device "glucose"]
vendor = openapscontrib.glucosetools
extra = glucose.ini

[report "monitor/glucoseclean.json"]
device = glucose
use = clean
infile = monitor/glucose.json
reporter = JSON

[report "monitor/pumphistory.json"]
device = pump
hours = 4.0
use = iter_pump_hours
reporter = JSON

[report "monitor/temp_basal.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "monitor/upload-status.json"]
suggested = enact/suggested.json
status = monitor/status.json
use = shell
reservoir = monitor/reservoir.json
reporter = JSON
battery = monitor/battery.json
clock = monitor/clock-zoned.json
json_default = True
device = ns-status
remainder = []
iob = iob.json
enacted = enact/enacted.json

[device "format-latest-nightscout-treatments"]
vendor = openaps.vendors.process
extra = format-latest-nightscout-treatments.ini
fields = 
cmd = bash -c
args = "( openaps latest-ns-treatment-time  > reporting/ns-latest-treatments.json ) && nightscout cull-latest-openaps-treatments monitor/pump-history-zoned.json model.json $(openaps latest-ns-treatment-time)"

